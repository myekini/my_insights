name: Combined CI/CD Pipeline for Frappe Insights and CDK Deployment

on:
  push:
    branches:
      - staging

    paths:
      - 'ECS-cdk/**'  # Trigger the CDK deployment when changes happen in ECS-cdk folder
      - '!ECS-cdk/**' # Trigger application deployment for changes outside ECS-cdk

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 816069156617
  ECR_REPOSITORY: earnipay/dashboard
  ECS_CLUSTER: earnipay-cluster
  ECS_SERVICE: earnipay-service

jobs:
  # Job 1: Infrastructure Deployment (triggered only when changes in ECS-cdk folder)
  deploy_infrastructure:
    runs-on: ubuntu-latest

    steps:
      # Checkout the infra directory
      - name: Checkout Infra Directory
        uses: actions/checkout@v2
        with:
          path: infra  # Checkout infra directory to work with CDK files

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      # Install dependencies for CDK (specifically for Python CDK)
      - name: Install CDK Python Dependencies
        run: |
          cd infra/ECS-cdk
          pip install -r requirements.txt

      # Install AWS CDK CLI (global tool)
      - name: Install AWS CDK CLI
        run: npm install -g aws-cdk

      # Deploy CDK Stack
      - name: Deploy CDK Stack
        working-directory: infra/ECS-cdk 
        run: |
          cdk deploy --require-approval never

  # Job 2: Application Deployment (triggered for changes outside ECS-cdk folder)
  build_and_deploy_application:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - name: Checkout Code
        uses: actions/checkout@v2

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version
        timeout-minutes: 5

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      # Pull required Docker images to avoid "no such image" errors
      - name: Pull Required Docker Images
        run: |
          docker pull mariadb:10.8
          docker pull redis:alpine

      # Build Docker Images
      - name: Build Docker Images
        id: build_images
        run: |
          cd docker
          docker-compose build

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # Tag and Push Docker Images to ECR
      - name: Tag and Push Docker Images
        id: tag_and_push_images
        run: |
          docker tag frappe/bench:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:frappe-staging-${{ github.sha }}
          docker tag mariadb:10.8 ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:mariadb-staging-${{ github.sha }}
          docker tag redis:alpine ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:redis-staging-${{ github.sha }}
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:frappe-staging-${{ github.sha }}
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:mariadb-staging-${{ github.sha }}
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:redis-staging-${{ github.sha }}

    # Save the image tags for later use in the CDK deployment
    outputs:
      FRAPPE_TAG: ${{ steps.tag_and_push_images.outputs.FRAPPE_TAG }}
      MARIADB_TAG: ${{ steps.tag_and_push_images.outputs.MARIADB_TAG }}
      REDIS_TAG: ${{ steps.tag_and_push_images.outputs.REDIS_TAG }}